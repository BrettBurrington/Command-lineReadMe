const fs = require('fs');
//this allows for interacting with the file system so you can read files and write to them
const inquirer = require('inquirer');
//require takes the module name as an argument and loads the module from node.js inthis case its inquirer

function promptUser() {
  return inquirer.prompt([
    
    {
      type: 'input',
      name: 'projectTitle',
      message: 'Enter the title of your project:',
    },
    {
      type: 'input',
      name: 'description',
      message: 'Describe your project:',
    },
    {
      type: 'input',
      name: 'installation',
      message: 'Provide instruction for how to install',
    },
     {
      type: 'input',
      name: 'usage',
      message: 'Provide some of the usage information:',
    },
    {
      type: 'input',
      name: 'contribution',
      message: 'Provide some guidelines for contibution to the project:',
    },
     {
      type: 'input',
      name: 'tests',
      message: 'State the test instructions:',
    },
     {
      type: 'list',
      name: 'license',
      message: 'Select a license that applies:',
      choices: ['MIT', 'Apache', 'GNU', 'None'],
    },
   {
      type: 'input',
      name: 'githubUsername',
      message: 'Enter your GitHub username:',
    },
    {
      type: 'input',
      name: 'email',
      message: 'Provide an email address for inquiries:',
    },
  ]);

}
function renderLicenseBadage(license){
console.log("license badge:"+ license)
if (license=="MIT"){
  return "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)"
}
else if (license=="Apache"){
  return "[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)"
}
else if (license=="GNU"){
  return "[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)"
}
else {
  return ""
}}


//function generateREADME declares the function that takes an object (answers) as a parameter
//(answers) has the users responses to the prompts
//returning a string literal!!
//put the badge after 64
function generateREADME(answers) {
  const licenseSection = '';
  if (answers.license !== 'None') {
    licenseSection = `## License\n${answers.license}\n`;
  }
  return `
# ${answers.projectTitle}

${renderLicenseBadage(answers.license)}

## Introduction
${answers.description}

## Table of Contents
- [Installation](#installation)
- [Usage](#usage)
${answers.license !== 'None' ? '- [License](#license)' : ''}
- [Contributing](#contributing)
- [Tests](#tests)
- [Questions](#questions)

## Installation
${answers.installation}

## Usage
${answers.usage}

${licenseSection ? '## License' : ''}
${answers.license === 'None' ? '' : answers.license}

## Contributing
${answers.contribution}

## Tests
${answers.tests}

## Questions
For any inquiries, contact the visionary leader at GitHub: [${answers.githubUsername}](https://github.com/${answers.githubUsername}) or via email at ${answers.email}.
`;
}
//this is so when they put their git hub name into it  it will be converted into a link containing the github id
async function init() {
  try {
    //used to enclose code thst may have an error.. if an error occurs it will go to the catch block
    console.log('Welcome to the README Generator!\n');
    //this is used to display the message in the console
    const answers = await promptUser();
    //await is used here to pause the execution until the user puts answrs to the prompts
    //the propt user function is to return the promise of the users answers when they finish the prompt
    const readmeContent = generateREADME(answers);
    //generateREADME() is the function with the "answers" variable as an argument and it generates the content of the md file 
  //creates template

    fs.writeFileSync('README.md', readmeContent);
    //this one writes the content generated by the generateREADMME() function to "README.md"
    //uses fs.writeFileSync() that is an asynchronous file system operation to make sure content si written before moving on

    console.log('README.md file generated successfully!');
  } catch (error) {
    console.error('Error generating README:', error);
  }
}
//this logs whether it had an error or success when its generated
init()
//if statement if the user picks none return empty string
//one for the license link table and for botto